/**
 * File generated by Jenny -- https://github.com/LanderlYoung/Jenny
 *
 * DO NOT EDIT THIS FILE.
 *
 * For bug report, please refer to github issue tracker https://github.com/LanderlYoung/Jenny/issues.
 */

/* C++ header file for class io/eontimer/audio/Sound$Native */
#pragma once

#include <jni.h>

namespace Sound {
namespace Native {

// DO NOT modify
static constexpr auto FULL_CLASS_NAME = u8"io/eontimer/audio/Sound$Native";


/*
 * Class:     io.eontimer.audio.Sound$Native
 * Method:    public static final void allocate$eon_timer_audio(java.nio.LongBuffer buffer)
 * Signature: (Ljava/nio/LongBuffer;)V
 */
void JNICALL allocate$eon_timer_audio(JNIEnv* env, jclass clazz, jobject buffer);

/*
 * Class:     io.eontimer.audio.Sound$Native
 * Method:    public static final void load$eon_timer_audio(long rawAddress, java.nio.ByteBuffer buffer)
 * Signature: (JLjava/nio/ByteBuffer;)V
 */
void JNICALL load$eon_timer_audio(JNIEnv* env, jclass clazz, jlong rawAddress, jobject buffer);

/*
 * Class:     io.eontimer.audio.Sound$Native
 * Method:    public static final void play$eon_timer_audio(long rawAddress)
 * Signature: (J)V
 */
void JNICALL play$eon_timer_audio(JNIEnv* env, jclass clazz, jlong rawAddress);

/**
* register Native functions
* @returns success or not
*/
inline bool registerNativeFunctions(JNIEnv* env) {
// 1. C++20 has u8"" string as char8_t type, we should cast them.
// 2. jni.h has JNINativeMethod::name as char* type not const char*. (while Android does)
#define jenny_u8cast(u8) const_cast<char *>(reinterpret_cast<const char *>(u8))
   const JNINativeMethod gsNativeMethods[] = {
       {
           /* method name      */ jenny_u8cast(u8"allocate$eon_timer_audio"),
           /* method signature */ jenny_u8cast(u8"(Ljava/nio/LongBuffer;)V"),
           /* function pointer */ reinterpret_cast<void *>(allocate$eon_timer_audio)
       },
       {
           /* method name      */ jenny_u8cast(u8"load$eon_timer_audio"),
           /* method signature */ jenny_u8cast(u8"(JLjava/nio/ByteBuffer;)V"),
           /* function pointer */ reinterpret_cast<void *>(load$eon_timer_audio)
       },
       {
           /* method name      */ jenny_u8cast(u8"play$eon_timer_audio"),
           /* method signature */ jenny_u8cast(u8"(J)V"),
           /* function pointer */ reinterpret_cast<void *>(play$eon_timer_audio)
       }
   };

   const int gsMethodCount = sizeof(gsNativeMethods) / sizeof(JNINativeMethod);

   bool success = false;
   jclass clazz = env->FindClass(jenny_u8cast(FULL_CLASS_NAME));
   if (clazz != nullptr) {
       success = !env->RegisterNatives(clazz, gsNativeMethods, gsMethodCount);
       env->DeleteLocalRef(clazz);
   }
   return success;
#undef jenny_u8cast
}

} // endof namespace Native
} // endof namespace Sound

